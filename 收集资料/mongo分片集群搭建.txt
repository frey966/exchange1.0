https://blog.csdn.net/weixin_49724150/article/details/121748365
--------------------------------------新的集群搭建------------------------------------------------------------------------------------------

3、config server配置服务器

systemLog:
  destination: file
  logAppend: true
  path: /usr/tool/mongo/config/logs/config.log

# Where and how to store data.
storage:
  dbPath: /usr/tool/mongo/config/data
  journal:
    enabled: true

# how the process runs
processManagement:
  fork: true  # fork and run in background
  pidFilePath: /usr/tool/mongo/config/mongod.pid  # location of pidfile
  timeZoneInfo: /usr/share/zoneinfo

# network interfaces
net:
  port: 27018
  bindIp: 0.0.0.0
sharding:
  clusterRole: configsvr

replication:
  replSetName: config
------------------------------------------------------------------------------------------------------------------------
27018 mongo-config

./mongod -f /usr/tool/mongo/start/config-27018.config


登陆任意一台服务器，初始化副本集
./mongo 127.0.0.1 --port 27018
初始化configServer副本集
rs.initiate(
  {
    _id: "config",
    configsvr: true,
    members: [
      { _id : 0, host : "172.31.18.127:27018"},
      { _id : 1, host : "172.31.16.39:27018"},
      { _id : 2, host : "172.31.29.98:27018"}
    ]
  }
)
查看节点状态
rs.status()


4、配置分片
-------------------------------shard1----------shard2----------shard2---------------------------------------------------------
systemLog:
  destination: file
  logAppend: true
  path: /usr/tool/mongo/shard1/logs/mongod.log

# Where and how to store data.
storage:
  dbPath: /usr/tool/mongo/shard1/data
  journal:
    enabled: true

# how the process runs
processManagement:
  fork: true  # fork and run in background
  pidFilePath: /usr/tool/mongo/shard1/mongod.pid  # location of pidfile
  timeZoneInfo: /usr/share/zoneinfo

# network interfaces
net:
  port: 27019
  bindIp: 0.0.0.0

sharding:
    clusterRole: shardsvr
    
replication:
    replSetName: shard1

	
mkdir -p shard1/logs
mkdir -p shard1/data

./mongod -f /usr/tool/mongo/start/shard1-27019.config
./mongod -f /usr/tool/mongo/start/shard2-27020.config
./mongod -f /usr/tool/mongo/start/shard3-27021.config


---------------------------------------------------------------
宝塔开发端口
mongo-shard1   27019
mongo-shard2   27020
mongo-shard3   27021
--------------------------------------------------------------
./mongo 127.0.0.1 --port 27019
rs.initiate(
  {
    _id: "shard1",
    members: [
      { _id : 0, host : "172.31.18.127:27019" },
      { _id : 1, host : "172.31.16.39:27019" },
      { _id : 2, host : "172.31.29.98:27019" }
    ]
  }
)

查看节点状态
rs.status()
-------------------------------------------------------------
./mongo 127.0.0.1 --port 27020
rs.initiate(
  {
    _id: "shard2",
    members: [
      { _id : 0, host : "172.31.18.127:27020"},
      { _id : 1, host : "172.31.16.39:27020"},
      { _id : 2, host : "172.31.29.98:27020"}
    ]
  }
)

查看节点状态
rs.status()
------------------------------------------------------------
./mongo 127.0.0.1 --port 27021
rs.initiate(
  {
    _id: "shard3",
    members: [
      { _id : 0, host : "172.31.18.127:27021" },
      { _id : 1, host : "172.31.16.39:27021" },
      { _id : 2, host : "172.31.29.98:27021" }
    ]
  }
)

查看各个分片副本集节点状态
rs.status()


5、配置路由服务器 mongos

systemLog:
  destination: file
  logAppend: true
  path: /usr/tool/mongo/mongos/logs/mongod.log

# how the process runs
processManagement:
  fork: true  # fork and run in background
  pidFilePath: /usr/tool/mongo/mongos/mongod.pid  # location of pidfile
  timeZoneInfo: /usr/share/zoneinfo

# network interfaces
net:
  port: 27017
  bindIp: 0.0.0.0

sharding:
  configdb: config/172.31.18.127:27018,172.31.16.39:27018,172.31.29.98:27018
  
创建目录:
mkdir -p mongos/logs
mkdir -p mongos/data

./mongos -f /usr/tool/mongo/start/mongod-25786.conf

./mongo 127.0.0.1 --port 25786

sh.addShard( "shard1/172.31.18.127:27019,172.31.16.39:27019,172.31.29.98:27019")
sh.addShard( "shard2/172.31.18.127:27020,172.31.16.39:27020,172.31.29.98:27020")
sh.addShard( "shard3/172.31.18.127:27021,172.31.16.39:27021,172.31.29.98:27021")
查看副本集群状态
sh.status()

7、测试
目前配置服务、路由服务、分片服务、副本集服务都已经串联起来了，但我们的目的是希望插入数据，数据能够自动分片。连接在mongos上，准备让指定的数据库、指定的集合分片生效。
#连接任意一台mongos节点
./mongo 127.0.0.1 --port 25786
-----------------------------------------------------------------------------------------------------------------------------------------
数据操作
在案例中，创建appuser用户、为数据库实例df_test启动分片。

1.初始化用户
use admin
db.createUser({user:'admin',pwd:'admin@879',roles:['clusterAdmin','dbAdminAnyDatabase','userAdminAnyDatabase','readWriteAnyDatabase']})
db.auth("admin","admin@879")
#查看分片情况
db.stats();
查看集群状态
sh.status()
# 查看用户 在 admin库
db.system.users.find().pretty()
#授权库账号
--------------------------------------------------------------------------------------------------
use testdb
sh.enableSharding("testdb") #开启分片
#为集合启用分片
为order集合设置分片规则
sh.shardCollection("testdb.order", {"_id": "hashed" })
db.createUser({user: "testdb", pwd: "testdb56", roles: [{ role: "dbOwner", db: "testdb" }]})
db.auth("testdb","testdb56")  # 集群可以不用执行，执行会提示错误
show collections

for (i = 1; i <= 100000; i=i+1){
    db.order.insert({'price': 1})
}
#查看分片情况
db.order.stats();
db.stats();
#查看插入的数据量
db.order.find().count()
-----------------------------------------------------------------------------------------------------------------------------------
use exchange-dev2
db.createUser({user: "exchangedev2", pwd: "exchangedev33", roles: [{ role: "dbOwner", db: "exchange-dev2"}]})
db.auth("exchangedev2","exchangedev33")  # 集群可以
sh.enableSharding("exchange-dev2") #开启分片
创建集合userid，为其执行分片初始化。
sh.shardCollection("exchange-dev2.usertest1",{"user_id": "hashed" })
for(var i=1;i<1000000;i++) db.usertest1.insert({user_id:i,username:"HSJ"+i,city:"tianjing"})
show collections
db.usertest1.find().count();
db.usertest1.stats();


use mongotest1
db.createUser({user: "mongotest123", pwd: "mongotest56", roles: [{ role: "dbOwner", db: "mongotest1" }]})
db.auth("mongotest123","mongotest56")  # 集群可以不用执行，执行会提示错误
sh.enableSharding("mongotest1") #开启分片
sh.shardCollection("mongotest1.usertest1",{"user_id": "hashed" })
show collections
db.lg_resume_datas.find().count();
sh.shardCollection("mongotest1.users",{userid:1})



use supreme
db.createUser({
	user: "sir",
	pwd: "supreme",
	roles: [{role: "readWrite", db: "supreme"}]
})
db.auth("sir","supreme")
sh.enableSharding("supreme")
sh.shardCollection("supreme.sir",{"name": "hashed"})




for(var i=1;i<100000;i++) db.users.insert({userid:i,username:"HSJ"+i,city:"beijing"})
exchangedev3.users.find().count();
db.users.find().count();
db.users.stats();

db.stats()

for(var i=1;i<1000000;i++) db.users.insert({userid:i,username:"HSJ"+i,city:"tianjing"})
for(var i=1;i<100000;i++) db.users.insert({userid:i,username:"HSJ"+i,city:"shenzhen"})

--------------------------------------------------------------------------------------------

db.printCollectionStats()
db.printReplicationInfo()
db.printSecondaryReplicationInfo()
db.printShardingStatus()
db.printSlaveReplicationInfo()
----------------------------------------------------------------------------------------------
#修改权限
db.updateUser("usertest",{roles:[ {role:"read",db:"testDB"} ]})
注：updateuser它是完全替换之前的值，如果要新增或添加roles而不是代替它 
#修改密码
db.updateUser("usertest",{pwd:"changepass1"})；
--------------------------------------------------------------------------------------------------------------------
查看数据库
use admin
db.auth("admin","admin@879")
show dbs
方法删除当前数据库
切换到 user 数据库，
使用 db.dropDatabase()
再次查看数据库列表
show databases

mongodb 生产开启 keyfile安全认证以及用户权限
keyfile是mongodb副本集的实例之间的权限认证，如果keyfile文件内容不同，那么该实例添加到副本集的时候，会出现不可达的状态
1、创建key文件: 注意，三个节点必须要用同一份keyfile，在一台机器生成，拷贝到另外两台，并且修改成 600 的文件属性





openssl rand -base64 756 > /usr/tool/mongo/start/key1.file
chmod 600 /data/mongodb/auth.keyfile


pCRcaNz47MLeUS4H5Y7G9XOEsXEw7nt0vDUSRPT1EcBuERjKFWn5h2+cwBY967dm
PSSUZTDYDdDSKHWP5gw6Co8NVS18RQkI6XWHUAFngyje5HOFMPv+3T1SkqiAxyWt
xYP6zC5mFjYUyQWbtMHanG8u/iwKtr2MAW+7hwjx2HJ1gcBv8xqNzgjeMS7aiA/V
Zxja/JM7wDdnd66orbtdvFGzk53khtM29v6/4UC7aFUOxrB3s+UqcEFwddwtcUcO
Ac5HDRFOeno+ZYmCPPIgQq+0aLt2YDXKtgOsY96PlIHxdhPLPds1GDWE8+zb/O8B
LNbEeyWM4pzMrycROvi0AJipm0Ldkiaf0wJaV6xWLDD1Ogb5YgM8106ZyUjIgeNn
YtV6h62L6qto/hBJNkDW1fxJRD1cZXcPUp++1aMgOpcyaikwGw2FDwQC2vBIZuFJ
1S2OlBtTVVz34rTYUO2anUs5C1n32Fx1qU4Rxe5D6o5AQp+smkjwOloM3Ch8iwJ8
3RSEq2ColLd9ORM9QiatTDKRFY4nKviAUYdWVv+2puUf9JZ1unqHH7tiDRinjxOP
7Sj5O8CUS6rsf6RWziiYs1ltTqW5uVdn15+N0Dk0n7nIVtzEmF0vq1i1zUQ9fLeb
So4xCnpe1RUgBSGVE/hwvx5aQOOZ9s8HUa4LgzLqFvbCOaIy8TdDHo+vKogaMkWj
sGiiUnVrmHl77jEzGJqr51yCBDubyZgZaTwpHjhbP7DTcmKTLEvjuGZXVgSfAKNp
9Ve7V8y4BR2BRM59Kg92KhwLDIUQu2VQ0Kd4FfuqaMb0xamJPl/WLBdcSRa7A8ru
XUFAmyUp9w5cWN+7YMOOyW1CP2zBBLIlAWjdZrgiypDrbe9OYhe68uS4R9cuWMOz
ifP1xdTzCdO+uGy2DdNv6iWB4A3iavZ03hSLbcETr/Cus1nY0jggZKZzOPLZe+Cj
2raLKvpsKgYJzVkyTxz0kUEEiAuJhDwaLaPdas5bY6oA5MO7

2.在每个配置文件里添加配置
config 和shard 添加:
security:
  keyFile: /usr/tool/mongo/start/auth.keyfile
  authorization: enabled
  
mongos 添加
security:
  keyFile: /usr/tool/mongo/star/keyfile
  
  
  关闭时，直接killall杀掉所有进程

ps -ef|grep mongod
ps -ef|grep mongo
killall mongod
killall mongo
killall mongos

209997